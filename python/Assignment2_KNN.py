# -*- coding: utf-8 -*-
"""Bagaipo_Assignment2_KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IkC6rWEuausRUMZykBAT5rPMpo70ABVi
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plot
import math
from math import sqrt
from sklearn.neighbors import KNeighborsClassifier
from scipy import stats
import operator

iris_url = "https://raw.githubusercontent.com/fabagaipo/cmsc173ml/main/datasets/IRIS_cutdown.csv"
iris = pd.read_csv(iris_url)
iris

iris = iris.to_numpy()
iris

plot.figure()
plot.scatter(x = iris[:, 0], y = iris[:, 1], c = iris[:, -1])

points = np.array([[3, 1.1],[1.8, 1.9],[5, 1.75],])

def euclideanDistance(instance1, instance2):
    distance = 0
    for x in range(len(instance1)):
        distance += pow((instance1[x] - instance2[x]), 2)
    return math.sqrt(distance)

def getKNeighbors(trainingSet, testInstance, k):
    distances = []
    length = len(testInstance)-1
    for x in range(len(trainingSet)):
        dist = euclideanDistance(testInstance, trainingSet[x])
        distances.append((trainingSet[x], dist))
    distances.sort(key=operator.itemgetter(1))
    neighbors = []
    for x in range(k):
        neighbors.append(distances[x][0])
    return neighbors

knn = KNeighborsClassifier(n_neighbors = 3)
knn.fit(iris[:, :-1], iris[:, 2])

predicted_clusters = []

print('Results:')
neighbors = []
for point in points.copy():
  point_neighbors = getKNeighbors(iris, point, 3);
  neighbors.append(point_neighbors)
  neighbor_clusters = []
  print(f'Point ({str(point[0])}, {str(point[1])}) :')
  for neighbor in point_neighbors:
    neighbor_clusters.append(neighbor[-1])
    predicted_cluster = stats.mode(neighbor_clusters)[0][0]
  print(f'Predicted cluster: {predicted_cluster}')
  print()