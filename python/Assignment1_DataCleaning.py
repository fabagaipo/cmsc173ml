# -*- coding: utf-8 -*-
"""Bagaipo_173_DataCleaning_Assignment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IqWooYwHWZFuMB_eWAaebEmnKYAZOt7f

Imports
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""Read dataset"""

data = pd.read_csv('fifa21_raw_data.csv', low_memory=False)
df = data.copy()

df.head()

df.info()

"""Clean and drop some columns"""

# Dropping all unnecessary columns
columns_to_drop = ['photoUrl','playerUrl','Loan Date End', 'Release Clause', 'BOV', 'BP', 'Growth', 'Attacking', 'Crossing', 'Finishing', 'Heading Accuracy', 'Short Passing', 'Volleys', 'Skill', 'Dribbling', 'Curve', 'FK Accuracy', 'Long Passing', 'Ball Control', 'Movement', 'Acceleration', 'Sprint Speed', 'Agility', 'Reactions', 'Balance', 'Power', 'Shot Power', 'Jumping', 'Stamina', 'Strength', 'Long Shots', 'Mentality', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'Defending', 'Marking', 'Standing Tackle', 'Sliding Tackle', 'Goalkeeping', 'GK Diving', 'GK Handling', 'GK Kicking', 'GK Positioning', 'GK Reflexes', 'W/F', 'SM', 'A/W', 'IR', 'PAC']
df = df.drop(columns = columns_to_drop)

# Splitting team and contract into 2 columns
df['Team & Contract'] = df['Team & Contract'].astype('str')
df['Team & Contract'].replace('\n', '', regex=True, inplace=True)
test = df['Team & Contract'][0]
Team = []
Contract_Duration = []
for x in range(len(df['Team & Contract'])):
    Team.append(str(df['Team & Contract'][x][:-11]))
    c = str(df['Team & Contract'][x][-11:])
    if c.startswith("2") == True:
        Contract_Duration.append(c)
    else:
        Contract_Duration.append("0")
df = df.drop(columns = ['Team & Contract'])
df['Team'] = Team
df['Contract Duration'] = Contract_Duration

df.head()

# hits column from object to int objects
hits = []
for x in range(len(df["Hits"])):
    s = str(df["Hits"][x][1:])
    s = s.replace('K','00')
    s = s.replace('.','')
    hits.append(s)
df['Hits'] = hits
df = df.astype({'Hits':'int'})

# convert date to proper date-time format
df['Joined']

# Change String months to numbers
def mtn(x):
    months = {
        'jan': 1,
        'feb': 2,
        'mar': 3,
        'apr':4,
         'may':5,
         'jun':6,
         'jul':7,
         'aug':8,
         'sep':9,
         'oct':10,
         'nov':11,
         'dec':12
        }
    a = x.strip()[:3].lower()
    return a

date = []
for x in range(len(df['Joined'])):
    d = df['Joined'][x]
    c = d.split(" ")
    month = str(mtn(c[0]))
    day = str(c[1].replace(',',''))
    year = str(c[2])
    if len(day) == 1:
        day = ('0'+str(day))
    date_long = (str(month)+'/'+str(day)+'/'+str(year))
    date_con = pd.to_datetime(date_long)
    date.append(date_con)

df['Joined'] = date
df['Joined']

# height changes
temp_height = []
for x in range(len(df['Height'])):
    x = df['Height'][x].replace('"', '').split("'")
    inches = int(x[0]) * 12 + int(x[1])
    temp_height.append(inches)
df['Height'] = temp_height
df['Height']

# weight changes
temp_weight= []
for x in range(len(df['Weight'])):
    temp_weight.append(int(df['Weight'][x].replace('lbs','')))

df['Weight'] = temp_weight
df['Weight']

# value changes
temp_value = []
for x in range(len(df['Value'])):
    value = df['Value'][x]
    value = value.replace('€','')
    value = value.replace('K','000')
    value = value.replace('M','000000')
    value = value.replace('.','F')
    if  'F' in value:
        value = value.replace('F','')
        value = value = int(value) / 10
    temp_value.append(int(value))

df['Value']= temp_value
df['Value']

df.info()

# wage changes
Temp_Wage = []
for x in range(len(df['Wage'])):
    Wage = df['Wage'][x]
    Wage = Wage.replace('€','')
    Wage = Wage.replace('K','000')
    Wage = Wage.replace('M','000000')
    Wage = Wage.replace('.','F')
    if  'F' in Wage:
        Wage = Wage.replace('F','')
        Wage = Wage = int(Wage) / 10
    Temp_Wage.append(int(Wage))

df['Wage']= Temp_Wage
df['Wage']

df['Positions'].unique()

# ordering positions to reduce them in size
temp_position = []
for x in range(len(df['Positions'])):
    y = sorted(df['Positions'][x].split(" "))
    yx = ' '.join(y)
    temp_position.append(yx)

df['Positions'] = temp_position
df['Positions'] = df['Positions'].astype(object)
df['Positions'].unique()

"""Visualizations"""

sns.jointplot(data=df, x="Age", y="↓OVA", hue="foot")

"""Finding outlier/s"""

# Oldest player
df.loc[df['Age'] == 53, ['LongName', 'Nationality', 'Team']]

sns.relplot(data=df, x="Wage", y="↓OVA")

# Most paid players
most_paid = df.nlargest(n=10, columns=['Wage'], keep='all')
most_paid[["Wage",'LongName', 'Nationality', 'Team','↓OVA']]

g = sns.JointGrid(data=df, x="Weight", y="Height")
g.plot_marginals(sns.histplot, kde=True)
g.plot(sns.scatterplot, sns.histplot)

# Heaviest players
heaviest = df.nlargest(n=5, columns=['Weight'], keep='all')
heaviest[["Weight",'LongName', 'Nationality', 'Team','↓OVA']]

# Tallest players
Tallest = df.nlargest(n=5, columns=['Height'], keep='all')
Tallest[["Height",'LongName', 'Nationality', 'Team','↓OVA']]

g = sns.relplot(x="Hits", y="↓OVA", data=df)

# Players with the most hits
most_hits = df.nlargest(n=5, columns=['Hits'], keep='all')
most_hits[["Hits",'LongName', 'Nationality', 'Team','↓OVA']]